from piston.handler import BaseHandler, AnonymousBaseHandler
from piston.utils import rc, require_mime, require_extended

from dish.models import Dish
from review.models import Review
from deal.models import Deal
from restaurant.models import Restaurant
from user_profiles.models import UserProfile
from event.models import Event
from globals.forms import SignupForm

from django.shortcuts import get_object_or_404
from django.http import Http404

from django.core.validators import email_re

from django.contrib.auth import authenticate, login




PTEST = True#False

"""
    == User ==
    No phone, errorMessage, syncArray
    user object:{uid, username, email, phone, errorMessage, syncArray, user_image, about}
                (favorate, dish@place, place)
"""    
class get_user_info(BaseHandler):    
    fields = ('id', 'username','email','about_me',('main_profile_pic',('image600x400','id')))
    def read (self, request):
        uid = request.GET.get('uid')
        if PTEST:
            uid = 3
        user=get_object_or_404(UserProfile,id=uid)
        return user
# Check objects
class signup_checkusername(BaseHandler):
    def read (self, request):
        username = request.GET.get('username')
        user = UserProfile.objects.filter(username=username)         
        if not user:
            return { 'errorMessage':0 } #available
        else:
            return { 'errorMessage':1 } #already used
        

class signup_checkemail(BaseHandler):
    def read (self, request):
        email = request.GET.get('email')
        user = UserProfile.objects.filter(email=email)         
        if not user:
            return { 'errorMessage':0 } #available
        else:
            return { 'errorMessage':1 } #already used

"""Should take care of SignupForm, and phone number not impelement"""
class signup(BaseHandler):
    fields = ('id', 'username','email','phone')
    def create (self, request):
        form = SignupForm(request.POST)
        if form.is_valid():
            data = form.save(commit = False)
            new_user = UserProfile.objects.create_user(data.username, data.email, data.password)
            new_user.phone = request.POST.get('phone')
            new_user.save()
            return new_user
        else:
            form = SignupForm()
            return { 'errorMessage':1 } #error
        

class signin(BaseHandler):
    #curl -d 'username=gage' -d 'password=gage' -d 'date=123' -d 'eid=1' http://localhost:8000/gulu_api/signin
    fields = ('id', 'username','email','phone')    
    def create (self, request):
        name_email = request.POST.get('name_email')
        password = request.POST.get('password')
        if not name_email:
            return { 'errorMessage':1 } #error
        if email_re.match(name_email):
            try:
                user_o = get_object_or_404(UserProfile, email=name_email)
            except Http404:
                return { 'errorMessage':1 } 
        else:
            try:
                user_o = get_object_or_404(UserProfile, username=name_email)
            except Http404:
                return { 'errorMessage':1 }
             
        username = user_o.username
        user = authenticate(username=username, password=password)
        if user is None:
            return {'errorMessage':2 }
        return user

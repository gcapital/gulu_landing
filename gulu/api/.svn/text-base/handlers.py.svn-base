from piston.handler import BaseHandler, AnonymousBaseHandler
from piston.utils import rc, require_mime, require_extended

from dish.models import Dish
from review.models import Review
from deal.models import Deal
from restaurant.models import Restaurant
from user_profiles.models import UserProfile
from event.models import Event
from globals.forms import SignupForm

from django.shortcuts import get_object_or_404


PTEST = True#False

# GET objects

"""
    == Dish ==
    No 
    dish:{dish_id,restaurant_id,user_id,name,create_type}
"""
class get_dish_by_rid(BaseHandler):    
    #model = Dish    
    fields = (('type',('name',)),'id', ('restaurant', ('id',)), 'created')
    def read(self, request):
        rid = request.GET.get('rid')
        if PTEST:
            rid = 1
        dishes = Dish.objects.filter(restaurant=rid)        
        return dishes       
"""
    == Review ==
    No 
    review : { review_id , dish_id , restaurant_id , user_id , photo_id , 
    content , dish_name , restaurant_name , address ,phone , region , city , 
    latitude , longitude , pic_url , time_stamp } 
"""    
class get_review_by_uid(BaseHandler):    
    #model = Review
    fields = ('id', ('dish',('id', 'name')), ('restaurant', ('id', 'name','address','phone','region',
        'city','latitude','longitude')),('user',('id',)),'content','time_stamp',('photo',('image600x400','id'))) 
    
    def read(self, request):
        uid = request.GET.get('uid')
        if PTEST:
            uid = 5
        reviews = Review.objects.filter(user=uid)[:10]
        return reviews
    
class get_review_by_rid(BaseHandler):    
    #model = Review
    fields = ('id', ('dish',('id', 'name')), ('restaurant', ('id', 'name','address','phone','region',
        'city','latitude','longitude')),('user',('id',)),'content','time_stamp',('photo',('image600x400','id'))) 
    
    def read(self, request):
        rid = request.GET.get('rid')
        if PTEST:
            rid = 1
        reviews = Review.objects.filter(restaurant=rid)[:10]
        return reviews    
"""
    == Deal ==
    No
    deal object:{deal_id,name,title,text,photo_url,latitude,longitude}
"""
class get_deal_by_rid(BaseHandler):    
    #model = Deal    
    fields = ('id','title', 'conditions',('restaurant',('name','latitude','longitude')),('cover',('image600x400','id')))
        
    def read(self, request):
        rid = request.GET.get('rid')
        if PTEST:
            rid = 1
        deals = Deal.objects.filter(restaurant=rid)
        return deals

class get_deal_nearby(BaseHandler):
    
    fields = ('id','title', 'conditions',('restaurant',('name','latitude','longitude')),('cover',('image600x400','id')))    
    model = Deal
    def isFloat(self, para):
        part_para = para.split('.',1)
        for seg in part_para:
            if seg.isdigit()==False:
                return False
        return True         
           
    def read(self, request):
        latitude = str(request.GET.get('latitude'))
        longitude = str(request.GET.get('longitude'))
        if PTEST:
            longitude = '0.0'
            latitude = '0.0'         
        if self.isFloat(latitude) and self.isFloat(longitude):            
            latitude = float(latitude)
            longitude = float(longitude)
        else:
            return []                
        deals = Deal.objects.all()
        deal_list = []
        for each_deal in deals:
            deal_rest = each_deal.restaurant
            if deal_rest.longitude<=longitude+0.3 and deal_rest.longitude>=longitude-0.3 and deal_rest.latitude<=latitude+0.3 and deal_rest.latitude>=latitude-0.3:
                deal_list.append(each_deal)
        return deal_list    
"""
    == Restaurant ==
    No
    restaurant:{restaurant_id, name, address, phone, latitude, longitude, city, region,
                manage_user_id,score,photo_url}(service_type,price_range)
"""
class get_restaurant_nearby(BaseHandler):    
    fields = ('id','name','address','phone','latitude','longitude','city','region', ('managers', ('id',)), 'score',('main_profile_pic',('image600x400','id')))
    model = Restaurant
    def isFloat(self, para):
        part_para = para.split('.',1)
        for seg in part_para:
            if seg.isdigit()==False:
                return False
        return True                 
    def read (self, request):        
        latitude = str(request.GET.get('latitude'))
        longitude = str(request.GET.get('longitude'))
        
        if PTEST:
            longitude = '0.0'
            latitude = '0.0'         
        if self.isFloat(latitude) and self.isFloat(longitude):            
            latitude = float(latitude)
            longitude = float(longitude)
        else:
            return []                
        rests = Restaurant.objects.all()
        rest_list = []
        for each_rest in rests:
            if each_rest.longitude<=longitude+0.3 and each_rest.longitude>=longitude-0.3 and each_rest.latitude<=latitude+0.3 and each_rest.latitude>=latitude-0.3:
                rest_list.append(each_rest)                
        return rest_list
    
class get_restaurant_info(BaseHandler):    
    fields =  ('id','name','address','phone','latitude','longitude','city','region', ('managers', ('id',)), 'score',('main_profile_pic',('image600x400','id')))
    def read (self, request): 
        rid = request.GET.get('rid')
        if PTEST:
            rid = 1
        restaurant=get_object_or_404(Restaurant, id=rid)
        return restaurant  
        
        
"""
    CODES = dict(ALL_OK = ('OK', 200),
                 CREATED = ('Created', 201),
                 DELETED = ('', 204), # 204 says "Don't send a body!"
                 BAD_REQUEST = ('Bad Request', 400),
                 FORBIDDEN = ('Forbidden', 401),
                 NOT_FOUND = ('Not Found', 404),
                 DUPLICATE_ENTRY = ('Conflict/Duplicate', 409),
                 NOT_HERE = ('Gone', 410),
                 INTERNAL_ERROR = ('Internal Error', 500),
                 NOT_IMPLEMENTED = ('Not Implemented', 501),
                 THROTTLED = ('Throttled', 503))
"""
    